@import "variables";
@import "mixins";
.vipui {
    button,
    input[type="button"]
    a {
        display: inline-block;
        zoom: 1;
        white-space: nowrap;
        vertical-align: middle;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        box-sizing: border-box;
        transition: all .3s linear;
        border-radius: $buttonBorderRadius;
        min-width: $minWidthDefault;

        /* basic style */
        @include basicStyle($buttonTextColor, $buttonBackgroundColor);

        /* border style */
        @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonBorderColor);

        /* size style */
        @include sizeStyle($buttonPaddingDefault, $buttonFontSizeDefault, $buttonLineHeightDefault);

        &:hover {
            @include basicStyle($buttonTextColor, $buttonHoverBackgroundColor);
            @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonHoverBackgroundColor);
        }

        &:active {
            @include basicStyle($buttonTextColor, $buttonActiveBackgroundColor);
            @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonActiveBackgroundColor);
        }

        &.ghost {
            @include basicStyle($buttonGhostTextColor, $buttonGhostBackgroundColor);
            @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonGhostBorderColor);
            &:hover {
                @include basicStyle($buttonGhostTextColor, $buttonGhostHoverBackgroundColor);
            }
            &:active {
                @include basicStyle($buttonGhostTextColor, $buttonGhostActiveBackgroundColor);
            }
        }

        /* mini size */
        &.mini {
            @include sizeStyle($buttonPaddingMini, $buttonFontSizeMini, $buttonLineHeightMini);
            min-width: $minWidthMini;
        }

        /* small size */
        &.small {
            @include sizeStyle($buttonPaddingSmall, $buttonFontSizeSmall, $buttonLineHeightSmall);
            min-width: $minWidthSmall;
        }

        /* large size */
        &.large {
            @include sizeStyle($buttonPaddingLarge, $buttonFontSizeLarge, $buttonLineHeightLarge);
            min-width: $minWidthLarge;
        }

        /* huge size */
        &.huge {
            @include sizeStyle($buttonPaddingHuge, $buttonFontSizeHuge, $buttonLineHeightHuge);
            min-width: $minWidthHuge;
        }

        /* block button */
        &.block {
            display: block;
            width: 100%;
        }

        /* clear focus status */
        &:focus {
            outline: 0;
        }

        /* brand button */
        &.brand {
            @include basicStyle($buttonTextBrandColor, $buttonBackgroundBrandColor);
            @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonBorderBrandColor);
            &:hover {
                @include basicStyle($buttonTextBrandColor, $buttonHoverBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonHoverBackgroundBrandColor);
            }
            &:active {
                @include basicStyle($buttonTextBrandColor, $buttonActiveBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonActiveBackgroundBrandColor);
            }
            &.ghost {
                @include basicStyle($buttonGhostTextBrandColor, $buttonGhostBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonGhostBorderBrandColor);
                &:hover {
                    @include basicStyle($buttonGhostTextBrandColor, $buttonGhostHoverBackgroundBrandColor);
                    @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonGhostBorderBrandColor);
                }
                &:active {
                    @include basicStyle($buttonGhostTextBrandColor, $buttonGhostActiveBackgroundBrandColor);
                    @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonGhostBorderBrandColor);
                }
            }
        }

        /* disabled status */
        &[disabled],
        &.disabled {
            cursor: not-allowed;
            @include basicStyle($buttonDisabledColor, $buttonDisabledBackgroundBrandColor);
            @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
            &:hover {
                @include basicStyle($buttonDisabledColor, $buttonDisabledBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
            }
            &:active {
                @include basicStyle($buttonDisabledColor, $buttonDisabledBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
            }
            &.ghost {
                @include basicStyle($buttonGhostDisabledColor, $buttonGhostDisabledBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
                &:hover {
                    @include basicStyle($buttonGhostDisabledColor, $buttonGhostDisabledBackgroundBrandColor);
                    @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
                }
                &:active {
                    @include basicStyle($buttonGhostDisabledColor, $buttonGhostDisabledBackgroundBrandColor);
                    @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
                }
            }
        }

        /* icon button */
        &.icon {
            /* basic style */
            @include basicStyle($buttonGhostTextColor, transparent);

            /* border style */
            @include borderStyle($buttonBorderStyle, $buttonBorderWidth, transparent);

            /* size style */
            @include sizeStyle($buttonPaddingIcon, $buttonFontSizeDefault, $buttonLineHeightDefault);

            min-width: inherit;

            &:hover {
                @include basicStyle($buttonGhostHoverTextColor, transparent);
            }

            &:active {
                @include basicStyle($buttonGhostActiveTextColor, transparent);
            }

            &.brand {
                /* basic style */
                @include basicStyle($buttonBackgroundBrandColor, transparent);

                /* border style */
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, transparent);

                /* size style */
                @include sizeStyle($buttonPaddingIcon, $buttonFontSizeDefault, $buttonLineHeightDefault);

                min-width: inherit;

                &:hover {
                    @include basicStyle($buttonHoverBackgroundBrandColor, transparent);
                }

                &:active {
                    @include basicStyle($buttonActiveBackgroundBrandColor, transparent);
                }
            }
        }

        /* icon */
        .icon {
            &+span {
                margin-left: $buttonIconMarginLeft;
            }
        }

        /* button bold text */
        &.bold {
            font-weight: bold;
        }
    }
}