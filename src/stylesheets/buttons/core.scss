@import "variables";
@import "mixins";
.vipui {
    button,
    a {
        display: inline-block;
        zoom: 1;
        white-space: nowrap;
        vertical-align: middle;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        box-sizing: border-box;
        transition: all .3s linear;
        border-radius: $buttonBorderRadius;

        /* basic style */
        @include basicStyle($buttonTextColor, $buttonBackgroundColor);

        /* border style */
        @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonBorderColor);

        /* size style */
        @include sizeStyle($buttonPaddingDefault, $buttonFontSizeDefault, $buttonLineHeightDefault);
        /* mini size */
        &.mini {
            @include sizeStyle($buttonPaddingMini, $buttonFontSizeMini, $buttonLineHeightMini);
        }
        /* small size */
        &.small {
            @include sizeStyle($buttonPaddingSmall, $buttonFontSizeSmall, $buttonLineHeightSmall);
        }
        /* large size */
        &.large {
            @include sizeStyle($buttonPaddingLarge, $buttonFontSizeLarge, $buttonLineHeightLarge);
        }
        /* huge size */
        &.huge {
            @include sizeStyle($buttonPaddingHuge, $buttonFontSizeHuge, $buttonLineHeightHuge);
        }
        /* block button */
        &.block {
            display: block;
            width: 100%;
        }
        /* clear focus status */
        &:focus {
            outline: 0;
        }
        /* default button */
        &.default {
            @include basicStyle($buttonTextColor, $buttonBackgroundColor);
            @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonBorderColor);
            &:hover {
                @include basicStyle($buttonTextColor, $buttonHoverBackgroundColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonHoverBackgroundColor);
            }
            &:active {
                @include basicStyle($buttonTextColor, $buttonActiveBackgroundColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonActiveBackgroundColor);
            }
            &.ghost {
                @include basicStyle($buttonGhostGhostTextColor, $buttonGhostBackgroundColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonGhostBorderColor);
                &:hover {
                    @include basicStyle($buttonGhostGhostTextColor, $buttonGhostHoverBackgroundColor);
                }
                &:active {
                    @include basicStyle($buttonGhostGhostTextColor, $buttonGhostActiveBackgroundColor);
                }
            }
        }
        /* brand button */
        &.brand {
            @include basicStyle($buttonTextBrandColor, $buttonBackgroundBrandColor);
            @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonBorderBrandColor);
            &:hover {
                @include basicStyle($buttonTextBrandColor, $buttonHoverBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonHoverBackgroundBrandColor);
            }
            &:active {
                @include basicStyle($buttonTextBrandColor, $buttonActiveBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonActiveBackgroundBrandColor);
            }
            &.ghost {
                @include basicStyle($buttonGhostTextBrandColor, $buttonGhostBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonGhostBorderBrandColor);
                &:hover {
                    @include basicStyle($buttonGhostTextBrandColor, $buttonGhostHoverBackgroundBrandColor);
                    @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonGhostBorderBrandColor);
                }
                &:active {
                    @include basicStyle($buttonGhostTextBrandColor, $buttonGhostActiveBackgroundBrandColor);
                    @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonGhostBorderBrandColor);
                }
            }
        }
        /* disabled status */
        &[disabled],
        &.disabled {
            cursor: not-allowed;
            @include basicStyle($buttonDisabledColor, $buttonDisabledBackgroundBrandColor);
            @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
            &:hover {
                @include basicStyle($buttonDisabledColor, $buttonDisabledBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
            }
            &:active {
                @include basicStyle($buttonDisabledColor, $buttonDisabledBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
            }
            &.ghost {
                @include basicStyle($buttonGhostDisabledColor, $buttonGhostDisabledBackgroundBrandColor);
                @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
                &:hover {
                    @include basicStyle($buttonGhostDisabledColor, $buttonGhostDisabledBackgroundBrandColor);
                    @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
                }
                &:active {
                    @include basicStyle($buttonGhostDisabledColor, $buttonGhostDisabledBackgroundBrandColor);
                    @include borderStyle($buttonBorderStyle, $buttonBorderWidth, $buttonDisabledBackgroundBrandColor);
                }
            }
        }
        /* icon */
        .icon {
            &+span {
                margin-left: $buttonIconMarginLeft;
            }
        }
        /* button bold text */
        &.bold {
            font-weight: bold;
        }
    }
}